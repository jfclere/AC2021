Listen localhost:8007
LoadModule ssl_module modules/mod_ssl.so
<VirtualHost localhost:8007>
SSLProxyEngine on
SSLProxyCACertificateFile  "/etc/pki/CA/cacert.pem"

ProxyPass "/examples" "https://localhost:7443/examples"
ProxyPassReverse "/examples" "https://localhost:7443/examples"

</VirtualHost>

<VirtualHost localhost:8000>
  SSLProxyEngine on
  SSLProxyCACertificateFile  "/etc/pki/CA/cacert.pem"
  SSLProxyMachineCertificateFile "/home/jfclere/CERTS/proxies/cert_key.pem"

  ProxyPass "/examples" "https://localhost:8443/examples"
  ProxyPassReverse "/examples" "https://localhost:8443/examples"

</VirtualHost>


Listen 8888
<VirtualHost _default_:8888>

  # tell help to use https
  SSLEngine On
  SSLCertificateFile /home/jfclere/CERTS/SERVER/newcert.pem
  SSLCertificateKeyFile /home/jfclere/CERTS/SERVER/newkey.txt.pem
  SSLCACertificateFile "/etc/pki/CA/cacert.pem"

  # export the ssl variables
  SSLOptions +StdEnvVars +ExportCertData

  # Use mod_headers to add them as headers.
  RequestHeader set SSL_CLIENT_CERT "%{SSL_CLIENT_CERT}s"
  RequestHeader set SSL_CIPHER "%{SSL_CIPHER}s"
  RequestHeader set SSL_SESSION_ID "%{SSL_SESSION_ID}s"
  RequestHeader set SSL_CIPHER_USEKEYSIZE "%{SSL_CIPHER_USEKEYSIZE}s"

  # require a certificate. (requre because httpd can't know when the webapp requires it)
  SSLVerifyClient require

  # to debug (that can be helpfull or use the org.apache.catalina.filters.RequestDumperFilter.
  #ProxyPass "/examples" "http://localhost:8080/examples"
  #ProxyPassReverse "/examples" "http://localhost:8080/examples"


  # tell where the CA and cert/key are to connect to tomcat
  SSLProxyEngine on
  SSLProxyCACertificateFile  "/etc/pki/CA/cacert.pem"
  # SSLProxyMachineCertificateFile "/home/jfclere/CERTS/proxies/cert_key.pem"
  SSLProxyMachineCertificateFile "/home/jfclere/CERTS/proxies/cert_key.PEM"
  ProxyPass "/examples" "https://localhost:8443/examples"
  ProxyPassReverse "/examples" "https://localhost:8443/examples"

</VirtualHost>

LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_http_module modules/mod_proxy_http.so
LoadModule proxy_http2_module modules/mod_proxy_http2.so

# H2C proxying
LoadModule http2_module modules/mod_http2.so
Listen 9999
<VirtualHost _default_:9999>
  # tell help to use https
  SSLEngine On
  SSLCertificateFile /home/jfclere/CERTS/SERVER/newcert.pem
  SSLCertificateKeyFile /home/jfclere/CERTS/SERVER/newkey.txt.pem
  SSLCACertificateFile "/etc/pki/CA/cacert.pem"
  Protocols h2 http/1.1

  ProxyPass "/examples" "h2c://localhost:8080/examples"
  ProxyPassReverse "/examples" "http://localhost:8080/examples"
</VirtualHost>

# H2 proxying
Listen 9998
<VirtualHost _default_:9998>

  # tell help to use https and h2
  SSLEngine On
  SSLCertificateFile /home/jfclere/CERTS/SERVER/newcert.pem
  SSLCertificateKeyFile /home/jfclere/CERTS/SERVER/newkey.txt.pem
  SSLCACertificateFile "/etc/pki/CA/cacert.pem"
  Protocols h2 http/1.1

  # export the ssl variables
  SSLOptions +StdEnvVars +ExportCertData

  # Use mod_headers to add them as headers.
  RequestHeader set SSL_CLIENT_CERT "%{SSL_CLIENT_CERT}s"
  RequestHeader set SSL_CIPHER "%{SSL_CIPHER}s"
  RequestHeader set SSL_SESSION_ID "%{SSL_SESSION_ID}s"
  RequestHeader set SSL_CIPHER_USEKEYSIZE "%{SSL_CIPHER_USEKEYSIZE}s"

  # require a certificate. (requre because httpd can't know when the webapp requires it)
  SSLVerifyClient require

  # to debug (that can be helpfull or use the org.apache.catalina.filters.RequestDumperFilter.
  #ProxyPass "/examples" "http://localhost:8080/examples"
  #ProxyPassReverse "/examples" "http://localhost:8080/examples"


  # tell where the CA and cert/key are to connect to tomcat
  SSLProxyEngine on
  SSLProxyCACertificateFile  "/etc/pki/CA/cacert.pem"
  SSLProxyMachineCertificateFile "/home/jfclere/CERTS/proxies/cert_key.pem"
  ProxyPass "/examples" "h2://localhost:8443/examples"
  ProxyPassReverse "/examples" "https://localhost:8443/examples"

</VirtualHost>
